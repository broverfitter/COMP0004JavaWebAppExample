/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/11.0.4
 * Generated at: 2025-03-15 18:08:35 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import uk.ac.ucl.model.DirectoryNode;
import uk.ac.ucl.model.NoteNode;

public final class home_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

 
    String HTMLForDirNode(DirectoryNode node) {
        StringBuilder html = new StringBuilder();
        html.append("<li class='dirNode'>")
            .append("<span class='toggle'>&nbsp;&nbsp;&nbsp;</span> ")
            .append(String.format("<span class='dirToggle' id='%s'>%s</span>", node.getPath(), node.getName()))
            .append("<ul class='children'>");
        return html.toString();
    }

    String HTMLForNoteNode(NoteNode node) {
        return String.format("<li class='noteNode'>| <a class='noteLink' href='' id='%s'>%s</a></li>", node.getFname(), node.getTitle());
    }

    // Define a Java function to generate HTML for the directory tree
    String getTreeHtml(Object node, boolean isRoot) {
        if (node == null) return "";
        StringBuilder html = new StringBuilder();
        if (isRoot) {
            DirectoryNode dirNode = (DirectoryNode) node;
            for (Object child : dirNode.getChildren()) {
                html.append(getTreeHtml(child, false));
            }
        } else {
            if (node instanceof DirectoryNode) {
                DirectoryNode dirNode = (DirectoryNode) node;
                html.append(HTMLForDirNode(dirNode));
                for (Object child : dirNode.getChildren()) {
                    html.append(getTreeHtml(child, false));
                }
                html.append("</ul></li>");
            } else if (node instanceof NoteNode) {
                NoteNode noteNode = (NoteNode) node;
                html.append(HTMLForNoteNode(noteNode));
            }
        }
        return html.toString();
    }

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(3);
    _jspx_imports_classes.add("uk.ac.ucl.model.DirectoryNode");
    _jspx_imports_classes.add("uk.ac.ucl.model.NoteNode");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("    <head>\r\n");
      out.write("        <link rel=\"stylesheet\" type=\"text/css\" href=\"css/style.css\">\r\n");
      out.write("        <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">\r\n");
      out.write("        <title>Home</title>\r\n");
      out.write("        <style>\r\n");
      out.write("            body {\r\n");
      out.write("                margin: 0;\r\n");
      out.write("                font-family: Arial, sans-serif;\r\n");
      out.write("            }\r\n");
      out.write("            #navbar {\r\n");
      out.write("                transition-duration: 0.15s;\r\n");
      out.write("                position: absolute;\r\n");
      out.write("                top: 100px;\r\n");
      out.write("                width: 250px;\r\n");
      out.write("                height: calc(100vh - 100px);\r\n");
      out.write("                background-color: #ddd;\r\n");
      out.write("                border-radius: 0px 5px 5px 0px;\r\n");
      out.write("            }\r\n");
      out.write("            #fileOptions {\r\n");
      out.write("                display: flex;\r\n");
      out.write("                justify-content: space-around;\r\n");
      out.write("            }\r\n");
      out.write("            .fileOption {\r\n");
      out.write("                text-align: center;\r\n");
      out.write("                display: inline-block;\r\n");
      out.write("                height: 20px;\r\n");
      out.write("                width: 20px;\r\n");
      out.write("                border-radius: 5px;\r\n");
      out.write("                padding: 5px;\r\n");
      out.write("                margin: 5px;\r\n");
      out.write("            }\r\n");
      out.write("            .fileOption:hover {\r\n");
      out.write("                background-color: #eee;\r\n");
      out.write("            }\r\n");
      out.write("            i {\r\n");
      out.write("                font-size: 20px;\r\n");
      out.write("            }\r\n");
      out.write("            #closeCheckbox {\r\n");
      out.write("                display: none;\r\n");
      out.write("            }\r\n");
      out.write("            #closeCheckbox:checked + #navbar {\r\n");
      out.write("                height: 40px;\r\n");
      out.write("                width: 50px;\r\n");
      out.write("            }\r\n");
      out.write("            #closeCheckbox:checked + #navbar #directory {\r\n");
      out.write("                visibility: hidden;\r\n");
      out.write("                transition: visibility 0s;\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            #closeCheckbox:not(:checked) + #navbar #directory {\r\n");
      out.write("                visibility: visible;\r\n");
      out.write("                transition: visibility 0s 0.1s;\r\n");
      out.write("            }\r\n");
      out.write("            #closeCheckbox:checked + #navbar #fileOptions .fileOption {\r\n");
      out.write("                display: none;\r\n");
      out.write("            }\r\n");
      out.write("            #closeCheckbox:checked + #navbar #fileOptions #close {\r\n");
      out.write("                display: block;\r\n");
      out.write("            }\r\n");
      out.write("            #closeCheckbox + #navbar #fileOptions #close i::before {\r\n");
      out.write("                content: \"\\f00d\"; /* FontAwesome 'x' icon */\r\n");
      out.write("            }\r\n");
      out.write("            #closeCheckbox:checked + #navbar #fileOptions #close i::before {\r\n");
      out.write("                content: \"\\f061\"; /* FontAwesome 'right arrow' icon */\r\n");
      out.write("            }\r\n");
      out.write("            #directory {\r\n");
      out.write("                overflow: hidden;\r\n");
      out.write("            }\r\n");
      out.write("            #directory * {\r\n");
      out.write("                position: relative;\r\n");
      out.write("                left: 10px;\r\n");
      out.write("                list-style-type: none;\r\n");
      out.write("            }\r\n");
      out.write("            .noteNode {\r\n");
      out.write("                margin: 5px 0px;\r\n");
      out.write("            }\r\n");
      out.write("            ul {\r\n");
      out.write("                margin: 0;\r\n");
      out.write("                padding: 0;\r\n");
      out.write("            }\r\n");
      out.write("            #content {\r\n");
      out.write("                position: fixed;\r\n");
      out.write("                width: calc(100% - 450px);\r\n");
      out.write("                min-width: 600px;\r\n");
      out.write("                min-height: 100vh;\r\n");
      out.write("                right: 0px;\r\n");
      out.write("                margin: 50px 100px 100px 0px;\r\n");
      out.write("            }\r\n");
      out.write("            #noteOptions {\r\n");
      out.write("                width: 100%;\r\n");
      out.write("                height: 50px;\r\n");
      out.write("                display: inline-flex;\r\n");
      out.write("            }\r\n");
      out.write("            #noteOptions button {\r\n");
      out.write("                background-color: white;\r\n");
      out.write("                border-radius: 5px;\r\n");
      out.write("                height: 40px;\r\n");
      out.write("                margin: 0px 50px;\r\n");
      out.write("                border: 1px solid #ddd;\r\n");
      out.write("            }\r\n");
      out.write("            #noteOptions select {\r\n");
      out.write("                height: 40px;\r\n");
      out.write("                margin: 0px 50px;\r\n");
      out.write("                border: 1px solid #ddd;\r\n");
      out.write("                border-radius: 5px;\r\n");
      out.write("                background-color: white;\r\n");
      out.write("            }\r\n");
      out.write("            #noteOptions button:hover {\r\n");
      out.write("                background-color: #f9f9f9;\r\n");
      out.write("            }\r\n");
      out.write("            #noteOptions button.active {\r\n");
      out.write("                background-color: orange;\r\n");
      out.write("            }\r\n");
      out.write("            #backpage {\r\n");
      out.write("                top: 50px;\r\n");
      out.write("                position: absolute;\r\n");
      out.write("                width: 100%;\r\n");
      out.write("                height: 100%;\r\n");
      out.write("                padding: 20px;\r\n");
      out.write("                box-sizing: border-box;\r\n");
      out.write("                background-color: #f9f9f9;\r\n");
      out.write("                border: 1px solid #ddd;\r\n");
      out.write("                border-radius: 5px;\r\n");
      out.write("                overflow-y: auto;\r\n");
      out.write("            }\r\n");
      out.write("            #noteForm {\r\n");
      out.write("                display: flex;\r\n");
      out.write("                flex-direction: column;\r\n");
      out.write("            }\r\n");
      out.write("            #noteForm [contenteditable] {\r\n");
      out.write("                width: 100%;\r\n");
      out.write("                padding: 10px;\r\n");
      out.write("                margin: 10px 0;\r\n");
      out.write("                font-size: 16px;\r\n");
      out.write("                outline: none;\r\n");
      out.write("            }\r\n");
      out.write("            #noteForm .title {\r\n");
      out.write("                font-weight: bold;\r\n");
      out.write("                font-size: 32px;\r\n");
      out.write("                margin-bottom: 20px;\r\n");
      out.write("            }\r\n");
      out.write("            #noteForm .content {\r\n");
      out.write("                height: calc(100% - 60px);\r\n");
      out.write("            }\r\n");
      out.write("            .placeholder {\r\n");
      out.write("                color: #aaa;\r\n");
      out.write("            }\r\n");
      out.write("            .tab {\r\n");
      out.write("                display: inline-block;\r\n");
      out.write("                width: 2em; /* Adjust the width as needed */\r\n");
      out.write("            }\r\n");
      out.write("            .toggle {\r\n");
      out.write("                cursor: pointer;\r\n");
      out.write("                user-select: none;\r\n");
      out.write("            }\r\n");
      out.write("            .children {\r\n");
      out.write("                display: none;\r\n");
      out.write("            }\r\n");
      out.write("            .dirNode.expanded > .children {\r\n");
      out.write("                display: block;\r\n");
      out.write("            }\r\n");
      out.write("            .dirNode > .toggle::before {\r\n");
      out.write("                content: \"\\25B6\"; /* Right arrow */\r\n");
      out.write("            }\r\n");
      out.write("            .dirToggle {\r\n");
      out.write("                cursor: pointer;\r\n");
      out.write("            }\r\n");
      out.write("            .dirToggle.active {\r\n");
      out.write("                padding: 3px;\r\n");
      out.write("                font-weight: bold;\r\n");
      out.write("                background-color: #eee;\r\n");
      out.write("            }\r\n");
      out.write("        </style>\r\n");
      out.write("        <script>\r\n");
      out.write("            document.addEventListener(\"DOMContentLoaded\", function() {\r\n");
      out.write("                const title = document.querySelector(\"#noteForm .title\");\r\n");
      out.write("                const content = document.querySelector(\"#noteForm .content\");\r\n");
      out.write("                const boldButton = document.getElementById(\"bold\");\r\n");
      out.write("                const italicsButton = document.getElementById(\"italics\");\r\n");
      out.write("                const fontSizeSelect = document.getElementById(\"fontSize\");\r\n");
      out.write("                const imageUpload = document.getElementById(\"imageUpload\");\r\n");
      out.write("                const insertImageButton = document.getElementById(\"insertImage\");\r\n");
      out.write("                const saveButton = document.querySelector(\".noteOption button[type='submit']\");\r\n");
      out.write("                const titleContentInput = document.getElementById(\"titleContent\");\r\n");
      out.write("                const noteContentInput = document.getElementById(\"noteContent\");\r\n");
      out.write("\r\n");
      out.write("                function setPlaceholder(element, placeholderText) {\r\n");
      out.write("                    if (element.textContent.trim() === \"\") {\r\n");
      out.write("                        element.textContent = placeholderText;\r\n");
      out.write("                        element.classList.add(\"placeholder\");\r\n");
      out.write("                    }\r\n");
      out.write("                }\r\n");
      out.write("\r\n");
      out.write("                function clearPlaceholder(element, placeholderText) {\r\n");
      out.write("                    if (element.textContent === placeholderText) {\r\n");
      out.write("                        element.textContent = \"\";\r\n");
      out.write("                        element.classList.remove(\"placeholder\");\r\n");
      out.write("                    }\r\n");
      out.write("                }\r\n");
      out.write("\r\n");
      out.write("                setPlaceholder(title, \"Title\");\r\n");
      out.write("                setPlaceholder(content, \"Start writing...\");\r\n");
      out.write("\r\n");
      out.write("                title.addEventListener(\"focus\", function() {\r\n");
      out.write("                    clearPlaceholder(title, \"Title\");\r\n");
      out.write("                });\r\n");
      out.write("\r\n");
      out.write("                title.addEventListener(\"blur\", function() {\r\n");
      out.write("                    setPlaceholder(title, \"Title\");\r\n");
      out.write("                });\r\n");
      out.write("\r\n");
      out.write("                content.addEventListener(\"focus\", function() {\r\n");
      out.write("                    clearPlaceholder(content, \"Start writing...\");\r\n");
      out.write("                });\r\n");
      out.write("\r\n");
      out.write("                content.addEventListener(\"blur\", function() {\r\n");
      out.write("                    setPlaceholder(content, \"Start writing...\");\r\n");
      out.write("                });\r\n");
      out.write("\r\n");
      out.write("                boldButton.addEventListener(\"click\", function(event) {\r\n");
      out.write("                    event.preventDefault();\r\n");
      out.write("                    document.execCommand(\"bold\");\r\n");
      out.write("                    boldButton.classList.toggle(\"active\");\r\n");
      out.write("                });\r\n");
      out.write("\r\n");
      out.write("                italicsButton.addEventListener(\"click\", function(event) {\r\n");
      out.write("                    event.preventDefault();\r\n");
      out.write("                    document.execCommand(\"italic\");\r\n");
      out.write("                    italicsButton.classList.toggle(\"active\");\r\n");
      out.write("                });\r\n");
      out.write("\r\n");
      out.write("                fontSizeSelect.addEventListener(\"change\", function(event) {\r\n");
      out.write("                    const fontSize = fontSizeSelect.value;\r\n");
      out.write("                    document.execCommand(\"fontSize\", false, fontSize);\r\n");
      out.write("                });\r\n");
      out.write("\r\n");
      out.write("                content.addEventListener(\"keydown\", function(event) {\r\n");
      out.write("                    if (event.key === \"Tab\") {\r\n");
      out.write("                        event.preventDefault();\r\n");
      out.write("                        document.execCommand(\"insertText\", false, \"\\t\");\r\n");
      out.write("                    }\r\n");
      out.write("                });\r\n");
      out.write("\r\n");
      out.write("                insertImageButton.addEventListener(\"click\", function() {\r\n");
      out.write("                    imageUpload.click();\r\n");
      out.write("                });\r\n");
      out.write("\r\n");
      out.write("                imageUpload.addEventListener(\"change\", function(event) {\r\n");
      out.write("                    const file = event.target.files[0];\r\n");
      out.write("                    if (file) {\r\n");
      out.write("                        const reader = new FileReader();\r\n");
      out.write("                        reader.onload = function(e) {\r\n");
      out.write("                            const img = document.createElement(\"img\");\r\n");
      out.write("                            img.src = e.target.result;\r\n");
      out.write("                            img.style.maxWidth = \"100%\";\r\n");
      out.write("                            const range = document.getSelection().getRangeAt(0);\r\n");
      out.write("                            range.insertNode(img);\r\n");
      out.write("                            range.setStartAfter(img);\r\n");
      out.write("                            range.setEndAfter(img);\r\n");
      out.write("                            document.getSelection().removeAllRanges();\r\n");
      out.write("                            document.getSelection().addRange(range);\r\n");
      out.write("                        };\r\n");
      out.write("                        reader.readAsDataURL(file);\r\n");
      out.write("                    }\r\n");
      out.write("                });\r\n");
      out.write("\r\n");
      out.write("                saveButton.addEventListener(\"click\", function(event) {\r\n");
      out.write("                    event.preventDefault();\r\n");
      out.write("\r\n");
      out.write("                    titleContentInput.value = title.innerHTML;\r\n");
      out.write("                    noteContentInput.value = content.innerHTML;\r\n");
      out.write("\r\n");
      out.write("                    const formData = new FormData(document.getElementById(\"noteForm\"));\r\n");
      out.write("\r\n");
      out.write("                    saveButton.textContent = \"Saving...\";\r\n");
      out.write("                    saveButton.disabled = true;\r\n");
      out.write("\r\n");
      out.write("                    fetch('saveNote', {\r\n");
      out.write("                        method: 'POST',\r\n");
      out.write("                        body: formData\r\n");
      out.write("                    })\r\n");
      out.write("                        .then(response => response.json())\r\n");
      out.write("                        .then(data => {\r\n");
      out.write("                            saveButton.textContent = \"Saved\";\r\n");
      out.write("                            setTimeout(() => {\r\n");
      out.write("                                saveButton.textContent = \"Save Note\";\r\n");
      out.write("                                saveButton.disabled = false;\r\n");
      out.write("                            }, 2000);\r\n");
      out.write("\r\n");
      out.write("                            if (data.noteId) {\r\n");
      out.write("                                document.getElementById(\"noteId\").value = data.noteId;\r\n");
      out.write("                            }\r\n");
      out.write("                        })\r\n");
      out.write("                        .catch(error => {\r\n");
      out.write("                            saveButton.textContent = \"Save Note\";\r\n");
      out.write("                            saveButton.disabled = false;\r\n");
      out.write("                            alert(\"rut roh\");\r\n");
      out.write("                        });\r\n");
      out.write("                    }\r\n");
      out.write("                );\r\n");
      out.write("\r\n");
      out.write("                // Toggle directory visibility\r\n");
      out.write("                document.querySelectorAll('.toggle').forEach(function(toggle) {\r\n");
      out.write("                    toggle.addEventListener('click', function() {\r\n");
      out.write("                        const dirNode = this.parentElement;\r\n");
      out.write("                        dirNode.classList.toggle('expanded');\r\n");
      out.write("                    });\r\n");
      out.write("                });\r\n");
      out.write("\r\n");
      out.write("                document.querySelectorAll('.dirToggle').forEach(function(toggle) {\r\n");
      out.write("                    toggle.addEventListener('click', function() {\r\n");
      out.write("                        // Check if this directory is already active\r\n");
      out.write("                        if (this.classList.contains('active')) {\r\n");
      out.write("                            // If it's already active, deactivate it\r\n");
      out.write("                            this.classList.remove('active');\r\n");
      out.write("                            document.getElementById(\"activeDir\").value = \"\"; // Set to empty/null\r\n");
      out.write("                        } else {\r\n");
      out.write("                            // Remove active class from all directories\r\n");
      out.write("                            document.querySelectorAll('.dirToggle').forEach(function(dir) {\r\n");
      out.write("                                dir.classList.remove('active');\r\n");
      out.write("                            });\r\n");
      out.write("\r\n");
      out.write("                            // Activate the clicked directory\r\n");
      out.write("                            this.classList.add('active');\r\n");
      out.write("                            this.parentElement.classList.add('expanded');\r\n");
      out.write("                            document.getElementById(\"activeDir\").value = this.id;\r\n");
      out.write("                        }\r\n");
      out.write("                    });\r\n");
      out.write("                });\r\n");
      out.write("                document.querySelectorAll('.noteLink').forEach(function(note) {\r\n");
      out.write("                    note.addEventListener('click', function() {\r\n");
      out.write("                        event.preventDefault();\r\n");
      out.write("                        \r\n");
      out.write("                        fetch('serveNote?id=' + this.id)\r\n");
      out.write("                            .then(response => response.json())\r\n");
      out.write("                            .then(data => {\r\n");
      out.write("                                document.querySelector(\"#noteForm .content\").textContent = data.content;\r\n");
      out.write("                                document.querySelector(\"#noteForm .title\").textContent = this.innerHTML;\r\n");
      out.write("\r\n");
      out.write("                                document.getElementById(\"noteId\").value = this.id;\r\n");
      out.write("\r\n");
      out.write("                                //clear placeholder\r\n");
      out.write("                                document.querySelector(\"#noteForm .content\").classList.remove(\"placeholder\");\r\n");
      out.write("                                document.querySelector(\"#noteForm .title\").classList.remove(\"placeholder\");\r\n");
      out.write("                            })\r\n");
      out.write("                            .catch(error => {\r\n");
      out.write("                                alert(\"rut roh\");\r\n");
      out.write("                        });\r\n");
      out.write("                    });\r\n");
      out.write("                });\r\n");
      out.write("\r\n");
      out.write("            });\r\n");
      out.write("        </script>\r\n");
      out.write("    </head>\r\n");
      out.write("    <body>\r\n");
      out.write("        <input type=\"checkbox\" id=\"closeCheckbox\">\r\n");
      out.write("        <div id=\"navbar\">\r\n");
      out.write("            <div id=\"fileOptions\">\r\n");
      out.write("                <div class=\"fileOption\" id=\"newFile\"><i class=\"fa-solid fa-file\"></i></div>\r\n");
      out.write("                <div class=\"fileOption\"><i class=\"fa-solid fa-folder-plus\"></i></div>\r\n");
      out.write("                <div class=\"fileOption\"><i class=\"fa-solid fa-arrow-up-wide-short\"></i></div>\r\n");
      out.write("                <div class=\"fileOption\" id=\"close\"><label for=\"closeCheckbox\"><i class=\"fa-solid\"></i></label></div>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div id=\"directory\">\r\n");
      out.write("                ");

                    DirectoryNode root = (DirectoryNode) request.getAttribute("tree");
                    out.println(getTreeHtml(root, true));
                
      out.write("\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("        <div id=\"content\">\r\n");
      out.write("            <div id=\"noteOptions\">\r\n");
      out.write("                <div class=\"noteOption\"><button type=\"submit\">Save Note</button></div>\r\n");
      out.write("                <div class=\"noteOption\"><button id=\"bold\"><i class=\"fa-solid fa-bold\"></i></button></div>\r\n");
      out.write("                <div class=\"noteOption\"><button id=\"italics\"><i class=\"fa-solid fa-italic\"></i></button></div>\r\n");
      out.write("                <div class=\"noteOption\">\r\n");
      out.write("                    <select id=\"fontSize\">\r\n");
      out.write("                        <option value=\"1\">1</option>\r\n");
      out.write("                        <option value=\"2\">2</option>\r\n");
      out.write("                        <option value=\"3\" selected>3</option>\r\n");
      out.write("                        <option value=\"4\">4</option>\r\n");
      out.write("                        <option value=\"5\">5</option>\r\n");
      out.write("                        <option value=\"6\">6</option>\r\n");
      out.write("                        <option value=\"7\">7</option>\r\n");
      out.write("                    </select>\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"noteOption\">\r\n");
      out.write("                    <input type=\"file\" id=\"imageUpload\" accept=\"image/*\" style=\"display: none;\">\r\n");
      out.write("                    <button type=\"button\" id=\"insertImage\"><i class=\"fa-solid fa-image\"></i></button>\r\n");
      out.write("                </div>\r\n");
      out.write("\r\n");
      out.write("            </div>\r\n");
      out.write("            <div id=\"backpage\">\r\n");
      out.write("                <form id=\"noteForm\" method=\"post\" action=\"saveNote\">\r\n");
      out.write("                    <input type=\"hidden\" name=\"notePath\" id=\"activeDir\">\r\n");
      out.write("                    <input type=\"hidden\" name=\"titleContent\" id=\"titleContent\">\r\n");
      out.write("                    <input type=\"hidden\" name=\"noteContent\" id=\"noteContent\">\r\n");
      out.write("                    <input type=\"hidden\" name=\"noteId\" id=\"noteId\">\r\n");
      out.write("                    <div contenteditable=\"true\" class=\"title\">Title</div>\r\n");
      out.write("                    <div contenteditable=\"true\" class=\"content\">Start writing...</div>\r\n");
      out.write("                </form>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("    </body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
