/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/11.0.4
 * Generated at: 2025-03-19 12:54:20 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import uk.ac.ucl.model.DirectoryNode;
import uk.ac.ucl.model.NoteNode;

public final class home_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(3);
    _jspx_imports_classes.add("uk.ac.ucl.model.DirectoryNode");
    _jspx_imports_classes.add("uk.ac.ucl.model.NoteNode");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("    <head>\r\n");
      out.write("        <link rel=\"stylesheet\" type=\"text/css\" href=\"css/style.css\">\r\n");
      out.write("        <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">\r\n");
      out.write("        <title>Home</title>\r\n");
      out.write("        <style>\r\n");
      out.write("            body {\r\n");
      out.write("                margin: 0;\r\n");
      out.write("                font-family: Arial, sans-serif;\r\n");
      out.write("            }\r\n");
      out.write("            #navbar {\r\n");
      out.write("                transition-duration: 0.15s;\r\n");
      out.write("                position: absolute;\r\n");
      out.write("                top: 100px;\r\n");
      out.write("                width: 250px;\r\n");
      out.write("                height: calc(100vh - 100px);\r\n");
      out.write("                background-color: #ddd;\r\n");
      out.write("                border-radius: 0px 5px 5px 0px;\r\n");
      out.write("            }\r\n");
      out.write("            #fileOptions {\r\n");
      out.write("                display: flex;\r\n");
      out.write("                justify-content: space-around;\r\n");
      out.write("            }\r\n");
      out.write("            .fileOption {\r\n");
      out.write("                text-align: center;\r\n");
      out.write("                display: inline-block;\r\n");
      out.write("                height: 20px;\r\n");
      out.write("                width: 20px;\r\n");
      out.write("                border-radius: 5px;\r\n");
      out.write("                padding: 5px;\r\n");
      out.write("                margin: 5px;\r\n");
      out.write("            }\r\n");
      out.write("            .fileOption:hover {\r\n");
      out.write("                background-color: #eee;\r\n");
      out.write("            }\r\n");
      out.write("            i {\r\n");
      out.write("                font-size: 20px;\r\n");
      out.write("            }\r\n");
      out.write("            #closeCheckbox {\r\n");
      out.write("                display: none;\r\n");
      out.write("            }\r\n");
      out.write("            #closeCheckbox:checked + #navbar {\r\n");
      out.write("                height: 40px;\r\n");
      out.write("                width: 50px;\r\n");
      out.write("            }\r\n");
      out.write("            #closeCheckbox:checked + #navbar #directory {\r\n");
      out.write("                visibility: hidden;\r\n");
      out.write("                transition: visibility 0s;\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            #closeCheckbox:not(:checked) + #navbar #directory {\r\n");
      out.write("                visibility: visible;\r\n");
      out.write("                transition: visibility 0s 0.1s;\r\n");
      out.write("            }\r\n");
      out.write("            #closeCheckbox:checked + #navbar #fileOptions .fileOption {\r\n");
      out.write("                display: none;\r\n");
      out.write("            }\r\n");
      out.write("            #closeCheckbox:checked + #navbar #fileOptions #close {\r\n");
      out.write("                display: block;\r\n");
      out.write("            }\r\n");
      out.write("            #closeCheckbox + #navbar #fileOptions #close i::before {\r\n");
      out.write("                content: \"\\f00d\"; /* FontAwesome 'x' icon */\r\n");
      out.write("            }\r\n");
      out.write("            #closeCheckbox:checked + #navbar #fileOptions #close i::before {\r\n");
      out.write("                content: \"\\f061\"; /* FontAwesome 'right arrow' icon */\r\n");
      out.write("            }\r\n");
      out.write("            #directory {\r\n");
      out.write("                overflow: hidden;\r\n");
      out.write("                width: 250px;\r\n");
      out.write("            }\r\n");
      out.write("            #directory * {\r\n");
      out.write("                position: relative;\r\n");
      out.write("                left: 10px;\r\n");
      out.write("                list-style-type: none;\r\n");
      out.write("                /* Constrain width to stay within directory boundaries */\r\n");
      out.write("                max-width: calc(100% - 10px);\r\n");
      out.write("                box-sizing: border-box;\r\n");
      out.write("            }\r\n");
      out.write("            .noteNode {\r\n");
      out.write("                width: calc(100% - 10px);\r\n");
      out.write("                margin: 5px 0px;\r\n");
      out.write("            }\r\n");
      out.write("            ul {\r\n");
      out.write("                margin: 0;\r\n");
      out.write("                padding: 0;\r\n");
      out.write("            }\r\n");
      out.write("            #content {\r\n");
      out.write("                position: fixed;\r\n");
      out.write("                width: calc(100% - 450px);\r\n");
      out.write("                min-width: 600px;\r\n");
      out.write("                min-height: 100vh;\r\n");
      out.write("                right: 0px;\r\n");
      out.write("                margin: 50px 100px 100px 0px;\r\n");
      out.write("            }\r\n");
      out.write("            #noteOptions {\r\n");
      out.write("                width: 100%;\r\n");
      out.write("                height: 50px;\r\n");
      out.write("                display: inline-flex;\r\n");
      out.write("            }\r\n");
      out.write("            #noteOptions button {\r\n");
      out.write("                background-color: white;\r\n");
      out.write("                border-radius: 5px;\r\n");
      out.write("                height: 40px;\r\n");
      out.write("                margin: 0px 50px;\r\n");
      out.write("                border: 1px solid #ddd;\r\n");
      out.write("            }\r\n");
      out.write("            #noteOptions select {\r\n");
      out.write("                height: 40px;\r\n");
      out.write("                margin: 0px 50px;\r\n");
      out.write("                border: 1px solid #ddd;\r\n");
      out.write("                border-radius: 5px;\r\n");
      out.write("                background-color: white;\r\n");
      out.write("            }\r\n");
      out.write("            #noteOptions button:hover {\r\n");
      out.write("                background-color: #f9f9f9;\r\n");
      out.write("            }\r\n");
      out.write("            #noteOptions button.active {\r\n");
      out.write("                background-color: orange;\r\n");
      out.write("            }\r\n");
      out.write("            #backpage {\r\n");
      out.write("                top: 50px;\r\n");
      out.write("                position: absolute;\r\n");
      out.write("                width: 100%;\r\n");
      out.write("                height: 100%;\r\n");
      out.write("                padding: 20px;\r\n");
      out.write("                box-sizing: border-box;\r\n");
      out.write("                background-color: #f9f9f9;\r\n");
      out.write("                border: 1px solid #ddd;\r\n");
      out.write("                border-radius: 5px;\r\n");
      out.write("                overflow-y: auto;\r\n");
      out.write("            }\r\n");
      out.write("            #noteForm {\r\n");
      out.write("                display: flex;\r\n");
      out.write("                flex-direction: column;\r\n");
      out.write("            }\r\n");
      out.write("            #noteForm [contenteditable] {\r\n");
      out.write("                width: 100%;\r\n");
      out.write("                padding: 10px;\r\n");
      out.write("                margin: 10px 0;\r\n");
      out.write("                font-size: 16px;\r\n");
      out.write("                outline: none;\r\n");
      out.write("            }\r\n");
      out.write("            #noteForm .title {\r\n");
      out.write("                font-weight: bold;\r\n");
      out.write("                font-size: 32px;\r\n");
      out.write("                margin-bottom: 20px;\r\n");
      out.write("            }\r\n");
      out.write("            #noteForm .content {\r\n");
      out.write("                height: calc(100% - 60px);\r\n");
      out.write("            }\r\n");
      out.write("            .placeholder {\r\n");
      out.write("                color: #aaa;\r\n");
      out.write("            }\r\n");
      out.write("            .tab {\r\n");
      out.write("                display: inline-block;\r\n");
      out.write("                width: 2em; /* Adjust the width as needed */\r\n");
      out.write("            }\r\n");
      out.write("            .toggle {\r\n");
      out.write("                cursor: pointer;\r\n");
      out.write("                user-select: none;\r\n");
      out.write("            }\r\n");
      out.write("            .children {\r\n");
      out.write("                display: none;\r\n");
      out.write("            }\r\n");
      out.write("            .dirNode.expanded > .children {\r\n");
      out.write("                display: block;\r\n");
      out.write("            }\r\n");
      out.write("            .dirToggle {\r\n");
      out.write("                position: relative;\r\n");
      out.write("                cursor: pointer;\r\n");
      out.write("            }\r\n");
      out.write("            .dirToggle.active {\r\n");
      out.write("                padding: 3px;\r\n");
      out.write("                font-weight: bold;\r\n");
      out.write("                background-color: #eee;\r\n");
      out.write("            }\r\n");
      out.write("            [contenteditable=true]:empty:before {\r\n");
      out.write("                content: attr(data-placeholder);\r\n");
      out.write("                color: #aaa;\r\n");
      out.write("            }\r\n");
      out.write("            input[type=\"text\"] {\r\n");
      out.write("                position: absolute;\r\n");
      out.write("                width: calc(100% - 50px);\r\n");
      out.write("                background-color: #eee;\r\n");
      out.write("                border: none;\r\n");
      out.write("                outline: none;\r\n");
      out.write("                padding: 5px;\r\n");
      out.write("                border-radius: 5px;\r\n");
      out.write("            }\r\n");
      out.write("            .dirToggle, .noteLink {\r\n");
      out.write("                /* Handle text overflow */\r\n");
      out.write("                overflow: hidden;\r\n");
      out.write("                text-overflow: ellipsis;\r\n");
      out.write("                max-width: calc(100% - 20px); /* Account for toggle button space */\r\n");
      out.write("            }\r\n");
      out.write("            #customContextMenu {\r\n");
      out.write("                position: absolute;\r\n");
      out.write("                display: none;\r\n");
      out.write("                background-color: white;\r\n");
      out.write("                border: 1px solid #ddd;\r\n");
      out.write("                border-radius: 5px;\r\n");
      out.write("                box-shadow: 0 2px 5px rgba(0,0,0,0.2);\r\n");
      out.write("                padding: 5px 0;\r\n");
      out.write("                min-width: 120px;\r\n");
      out.write("                z-index: 1000;\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            #customContextMenu div {\r\n");
      out.write("                height: 20px;\r\n");
      out.write("                padding: 8px 15px;\r\n");
      out.write("                cursor: pointer;\r\n");
      out.write("                display: flex;\r\n");
      out.write("                align-items: center;\r\n");
      out.write("                gap: 10px;\r\n");
      out.write("                font-size: 14px;\r\n");
      out.write("                color: #333;\r\n");
      out.write("            }\r\n");
      out.write("            #customContextMenu div:hover {\r\n");
      out.write("                background-color: #f0f0f0;\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            #customContextMenu i {\r\n");
      out.write("                font-size: 16px;\r\n");
      out.write("                color: #777;\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            #deleteOption {\r\n");
      out.write("                color: #e74c3c;\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            #renameDirField {\r\n");
      out.write("                background-color: inherit;\r\n");
      out.write("                height: 20px;\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("        </style>\r\n");
      out.write("        <script>\r\n");
      out.write("    document.addEventListener(\"DOMContentLoaded\", function() {\r\n");
      out.write("        // Initialize UI elements\r\n");
      out.write("        updateDirectoryTree();\r\n");
      out.write("\r\n");
      out.write("        const title = document.querySelector(\"#noteForm .title\");\r\n");
      out.write("        const content = document.querySelector(\"#noteForm .content\");\r\n");
      out.write("        const boldButton = document.getElementById(\"bold\");\r\n");
      out.write("        const italicsButton = document.getElementById(\"italics\");\r\n");
      out.write("        const fontSizeSelect = document.getElementById(\"fontSize\");\r\n");
      out.write("        const imageUpload = document.getElementById(\"imageUpload\");\r\n");
      out.write("        const insertImageButton = document.getElementById(\"insertImage\");\r\n");
      out.write("        const saveButton = document.querySelector(\".noteOption button[type='submit']\");\r\n");
      out.write("        const titleContentInput = document.getElementById(\"titleContent\");\r\n");
      out.write("        const noteContentInput = document.getElementById(\"noteContent\");\r\n");
      out.write("        const directoryEl = document.getElementById('directory');\r\n");
      out.write("        const contextMenu = document.getElementById('customContextMenu');\r\n");
      out.write("        let rightClickTarget = null;\r\n");
      out.write("\r\n");
      out.write("        // Text formatting buttons\r\n");
      out.write("        boldButton.addEventListener(\"click\", function(event) {\r\n");
      out.write("            event.preventDefault();\r\n");
      out.write("            document.execCommand(\"bold\");\r\n");
      out.write("            boldButton.classList.toggle(\"active\");\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        italicsButton.addEventListener(\"click\", function(event) {\r\n");
      out.write("            event.preventDefault();\r\n");
      out.write("            document.execCommand(\"italic\");\r\n");
      out.write("            italicsButton.classList.toggle(\"active\");\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        fontSizeSelect.addEventListener(\"change\", function(event) {\r\n");
      out.write("            const fontSize = fontSizeSelect.value;\r\n");
      out.write("            document.execCommand(\"fontSize\", false, fontSize);\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // Tab key handling\r\n");
      out.write("        content.addEventListener(\"keydown\", function(event) {\r\n");
      out.write("            if (event.key === \"Tab\") {\r\n");
      out.write("                event.preventDefault();\r\n");
      out.write("                document.execCommand(\"insertText\", false, \"\\t\");\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // Image upload handling\r\n");
      out.write("        insertImageButton.addEventListener(\"click\", function() {\r\n");
      out.write("            imageUpload.click();\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        imageUpload.addEventListener(\"change\", function(event) {\r\n");
      out.write("            const file = event.target.files[0];\r\n");
      out.write("            if (file) {\r\n");
      out.write("                const reader = new FileReader();\r\n");
      out.write("                reader.onload = function(e) {\r\n");
      out.write("                    const img = document.createElement(\"img\");\r\n");
      out.write("                    img.src = e.target.result;\r\n");
      out.write("                    img.style.maxWidth = \"100%\";\r\n");
      out.write("                    const range = document.getSelection().getRangeAt(0);\r\n");
      out.write("                    range.insertNode(img);\r\n");
      out.write("                    range.setStartAfter(img);\r\n");
      out.write("                    range.setEndAfter(img);\r\n");
      out.write("                    document.getSelection().removeAllRanges();\r\n");
      out.write("                    document.getSelection().addRange(range);\r\n");
      out.write("                };\r\n");
      out.write("                reader.readAsDataURL(file);\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // Save button handling\r\n");
      out.write("        saveButton.addEventListener(\"click\", function(event) {\r\n");
      out.write("            event.preventDefault();\r\n");
      out.write("\r\n");
      out.write("            titleContentInput.value = title.innerHTML;\r\n");
      out.write("            noteContentInput.value = content.innerHTML;\r\n");
      out.write("\r\n");
      out.write("            const formData = new FormData(document.getElementById(\"noteForm\"));\r\n");
      out.write("\r\n");
      out.write("            saveButton.textContent = \"Saving...\";\r\n");
      out.write("            saveButton.disabled = true;\r\n");
      out.write("\r\n");
      out.write("            fetch('saveNote', {\r\n");
      out.write("                method: 'POST',\r\n");
      out.write("                body: formData\r\n");
      out.write("            })\r\n");
      out.write("                .then(response => response.json())\r\n");
      out.write("                .then(data => {\r\n");
      out.write("                    saveButton.textContent = \"Saved\";\r\n");
      out.write("                    setTimeout(() => {\r\n");
      out.write("                        saveButton.textContent = \"Save Note\";\r\n");
      out.write("                        saveButton.disabled = false;\r\n");
      out.write("                    }, 2000);\r\n");
      out.write("\r\n");
      out.write("                    if (data.noteId) {\r\n");
      out.write("                        document.getElementById(\"noteId\").value = data.noteId;\r\n");
      out.write("                    }\r\n");
      out.write("\r\n");
      out.write("                    updateDirectoryTree();\r\n");
      out.write("                })\r\n");
      out.write("                .catch(error => {\r\n");
      out.write("                    saveButton.textContent = \"Save Note\";\r\n");
      out.write("                    saveButton.disabled = false;\r\n");
      out.write("                    console.error(\"Error saving note:\", error);\r\n");
      out.write("                });\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // EVENT DELEGATION FOR DIRECTORY ELEMENTS\r\n");
      out.write("        // Single event handler for all directory-related clicks\r\n");
      out.write("        document.getElementById('directory').addEventListener('click', function(event) {\r\n");
      out.write("            // Handle toggle clicks (expand/collapse)\r\n");
      out.write("            if (event.target.classList.contains('toggle')) {\r\n");
      out.write("                event.stopPropagation();\r\n");
      out.write("                const dirNode = event.target.parentElement;\r\n");
      out.write("                dirNode.classList.toggle('expanded');\r\n");
      out.write("            }\r\n");
      out.write("            \r\n");
      out.write("            // Handle directory selection clicks\r\n");
      out.write("            else if (event.target.classList.contains('dirToggle')) {\r\n");
      out.write("                const dirToggle = event.target;\r\n");
      out.write("                \r\n");
      out.write("                // Check if already active\r\n");
      out.write("                if (dirToggle.classList.contains('active')) {\r\n");
      out.write("                    dirToggle.classList.remove('active');\r\n");
      out.write("                    document.getElementById(\"activeDir\").value = \"\";\r\n");
      out.write("                } else {\r\n");
      out.write("                    // Remove active class from all directories\r\n");
      out.write("                    document.querySelectorAll('.dirToggle').forEach(function(dir) {\r\n");
      out.write("                        dir.classList.remove('active');\r\n");
      out.write("                    });\r\n");
      out.write("                    \r\n");
      out.write("                    // Activate clicked directory\r\n");
      out.write("                    dirToggle.classList.add('active');\r\n");
      out.write("                    dirToggle.parentElement.classList.add('expanded');\r\n");
      out.write("                    document.getElementById(\"activeDir\").value = dirToggle.id;\r\n");
      out.write("                }\r\n");
      out.write("            }\r\n");
      out.write("            \r\n");
      out.write("            // Handle note clicks\r\n");
      out.write("            else if (event.target.classList.contains('noteLink')) {\r\n");
      out.write("                event.preventDefault();\r\n");
      out.write("                const noteLink = event.target;\r\n");
      out.write("                \r\n");
      out.write("                fetch('serveNote?id=' + noteLink.id)\r\n");
      out.write("                    .then(response => response.json())\r\n");
      out.write("                    .then(data => {\r\n");
      out.write("                        document.querySelector(\"#noteForm .content\").innerHTML = data.content;\r\n");
      out.write("                        document.querySelector(\"#noteForm .title\").innerHTML = noteLink.textContent;\r\n");
      out.write("                        document.getElementById(\"noteId\").value = noteLink.id;\r\n");
      out.write("                    })\r\n");
      out.write("                    .catch(error => console.error('Error loading note:', error));\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // EVENT DELEGATION FOR FILE OPTIONS\r\n");
      out.write("        document.getElementById('fileOptions').addEventListener('click', function(event) {\r\n");
      out.write("            // Find the clicked element or its parent with class 'fileOption'\r\n");
      out.write("            let fileOption = event.target;\r\n");
      out.write("            if (!fileOption.classList.contains('fileOption')) {\r\n");
      out.write("                fileOption = event.target.closest('.fileOption');\r\n");
      out.write("            }\r\n");
      out.write("            \r\n");
      out.write("            if (!fileOption) return;\r\n");
      out.write("            \r\n");
      out.write("            // Handle new file clicks\r\n");
      out.write("            if (fileOption.id === 'newFile') {\r\n");
      out.write("                document.querySelector(\"#noteForm .title\").innerHTML = \"\";\r\n");
      out.write("                document.querySelector(\"#noteForm .content\").innerHTML = \"\";\r\n");
      out.write("                document.getElementById(\"noteId\").value = \"\";\r\n");
      out.write("            }\r\n");
      out.write("            \r\n");
      out.write("            if (fileOption.id === 'newDir') {\r\n");
      out.write("                if (activeDir.value == \"\") {\r\n");
      out.write("                    targetContainer = document.getElementById('directory');\r\n");
      out.write("                }\r\n");
      out.write("                else {\r\n");
      out.write("                    activeDirToggle = document.getElementById(activeDir.value);\r\n");
      out.write("                    dirNode = activeDirToggle.parentElement;\r\n");
      out.write("                    targetContainer = dirNode.querySelector('.children');\r\n");
      out.write("                }\r\n");
      out.write("                newElement = document.createElement('li');\r\n");
      out.write("                newElement.className = 'dirNode';\r\n");
      out.write("                newElement.innerHTML = '<span class=\"toggle\">></span><span class=\"dirToggle\"><input id=\"newDirName\" type=\"text\" placeholder=\"New Folder\"></span><ul class=\"children\"></ul>';\r\n");
      out.write("                targetContainer.appendChild(newElement);\r\n");
      out.write("\r\n");
      out.write("                const inputField = newElement.querySelector('input');\r\n");
      out.write("                inputField.focus();\r\n");
      out.write("\r\n");
      out.write("                inputField.addEventListener('keydown', function(event) {\r\n");
      out.write("                    if (event.key === 'Enter') {\r\n");
      out.write("                        event.preventDefault();\r\n");
      out.write("\r\n");
      out.write("                        fetch('newDir?dirPath=' + activeDir.value + '&dirName=' + inputField.value)\r\n");
      out.write("\r\n");
      out.write("                        const newDirName = inputField.value;\r\n");
      out.write("                        inputField.remove();\r\n");
      out.write("                        newElement.querySelector('.dirToggle').textContent = newDirName;\r\n");
      out.write("                    }\r\n");
      out.write("                });\r\n");
      out.write("            }\r\n");
      out.write("            \r\n");
      out.write("            // Handle new folder clicks, etc.\r\n");
      out.write("            // Add more conditions here as needed\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        document.getElementById('directory').addEventListener('contextmenu', function(event) {\r\n");
      out.write("            if (event.target.classList.contains('noteLink') || event.target.closest('.dirNode')) {\r\n");
      out.write("                event.preventDefault();\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        directoryEl.addEventListener('contextmenu', function(event) {\r\n");
      out.write("            // Find the target element - either noteLink or dirNode\r\n");
      out.write("            const target = event.target.classList.contains('noteLink') \r\n");
      out.write("                ? event.target \r\n");
      out.write("                : event.target.closest('.dirNode');\r\n");
      out.write("                \r\n");
      out.write("            if (target) {\r\n");
      out.write("                event.preventDefault();\r\n");
      out.write("\r\n");
      out.write("                rightClickTarget = target;\r\n");
      out.write("                \r\n");
      out.write("                // Position the menu at the cursor position\r\n");
      out.write("                contextMenu.style.left = event.pageX + 'px';\r\n");
      out.write("                contextMenu.style.top = event.pageY + 'px';\r\n");
      out.write("                \r\n");
      out.write("                if (target.classList.contains('noteLink')) {\r\n");
      out.write("                    document.getElementById('renameOption').style.display = 'none';\r\n");
      out.write("                } else {\r\n");
      out.write("                    document.getElementById('renameOption').style.display = 'flex';\r\n");
      out.write("                    dirName = target.querySelector('.dirToggle').textContent;\r\n");
      out.write("                    document.getElementById('renameDirField').value = dirName;\r\n");
      out.write("                }\r\n");
      out.write("\r\n");
      out.write("                contextMenu.style.display = 'block';\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // Hide menu on any left-click\r\n");
      out.write("        document.addEventListener('click', function() {\r\n");
      out.write("            contextMenu.style.display = 'none';\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // Handle the 'Delete' option\r\n");
      out.write("        document.getElementById('deleteOption').addEventListener('click', function() {\r\n");
      out.write("            if (!rightClickTarget) return;\r\n");
      out.write("\r\n");
      out.write("            // Determine if it's a note or directory\r\n");
      out.write("            let endpoint, id;\r\n");
      out.write("\r\n");
      out.write("            if (rightClickTarget.classList.contains('noteLink')) {\r\n");
      out.write("                // It's a note\r\n");
      out.write("                id = rightClickTarget.id;\r\n");
      out.write("                endpoint = 'deleteNote?id=' + id;\r\n");
      out.write("            } else {\r\n");
      out.write("                // It's a directory\r\n");
      out.write("                path = rightClickTarget.querySelector('.dirToggle').id;\r\n");
      out.write("                endpoint = 'deleteDir?dirPath=' + path;  \r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            // Make the fetch request\r\n");
      out.write("            fetch(endpoint)\r\n");
      out.write("                .then(response => response.json())\r\n");
      out.write("                .then(data => {\r\n");
      out.write("                    updateDirectoryTree()\r\n");
      out.write("            })\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // Handle the 'Rename' option\r\n");
      out.write("        document.getElementById('renameOption').addEventListener('click', function(e) {\r\n");
      out.write("            e.stopPropagation(); // Prevent menu from closing\r\n");
      out.write("            \r\n");
      out.write("            if (!rightClickTarget || rightClickTarget.classList.contains('noteLink')) return;\r\n");
      out.write("            \r\n");
      out.write("            // Get the directory toggle element\r\n");
      out.write("            const dirToggle = rightClickTarget.querySelector('.dirToggle');\r\n");
      out.write("            if (!dirToggle) return;\r\n");
      out.write("            \r\n");
      out.write("            // Get the current directory name\r\n");
      out.write("            const currentName = dirToggle.textContent.trim();\r\n");
      out.write("            const dirPath = dirToggle.id;\r\n");
      out.write("            \r\n");
      out.write("            // Show and position the input field\r\n");
      out.write("            const inputField = document.getElementById('renameDirField');\r\n");
      out.write("            inputField.value = currentName;\r\n");
      out.write("            inputField.style.display = 'block';\r\n");
      out.write("            inputField.focus();\r\n");
      out.write("            \r\n");
      out.write("            // Hide the text content of renameOption\r\n");
      out.write("            this.firstChild.textContent = '';\r\n");
      out.write("            this.querySelector('i').style.display = 'none';\r\n");
      out.write("            \r\n");
      out.write("            // Handle input field events\r\n");
      out.write("            inputField.addEventListener('keydown', function(event) {\r\n");
      out.write("                if (event.key === 'Enter') {\r\n");
      out.write("                    // Here you would handle the actual rename operation\r\n");
      out.write("                    // For example: fetch('renameDir?dirPath=' + dirPath + '&newName=' + inputField.value)\r\n");
      out.write("                    fetch('renameDir?dirPath=' + dirPath + '&newName=' + inputField.value)\r\n");
      out.write("                        .then(response => response.json())\r\n");
      out.write("                        .then(data => {\r\n");
      out.write("                            // Update the directory tree after renaming\r\n");
      out.write("                            updateDirectoryTree();\r\n");
      out.write("                        })\r\n");
      out.write("                        .catch(error => console.error('Error renaming directory:', error));\r\n");
      out.write("                    // Hide the input and restore the context menu\r\n");
      out.write("                    inputField.style.display = 'none';\r\n");
      out.write("                    contextMenu.style.display = 'none';\r\n");
      out.write("                }\r\n");
      out.write("            });\r\n");
      out.write("        });\r\n");
      out.write("        \r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    // Simplified update directory tree function\r\n");
      out.write("    function updateDirectoryTree() {\r\n");
      out.write("        // Store expanded directories and active directory state before updating\r\n");
      out.write("        const expandedDirs = [];\r\n");
      out.write("        document.querySelectorAll('.dirNode.expanded').forEach(function(dir) {\r\n");
      out.write("            const dirToggle = dir.querySelector('.dirToggle');\r\n");
      out.write("            if (dirToggle && dirToggle.id) {\r\n");
      out.write("                expandedDirs.push(dirToggle.id);\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("        \r\n");
      out.write("        let activeDir = null;\r\n");
      out.write("        const activeDirElement = document.querySelector('.dirToggle.active');\r\n");
      out.write("        if (activeDirElement) {\r\n");
      out.write("            activeDir = activeDirElement.id;\r\n");
      out.write("        }\r\n");
      out.write("                \r\n");
      out.write("        // Fetch and update the directory tree\r\n");
      out.write("        fetch('getDirectoryTree')\r\n");
      out.write("            .then(response => response.text())\r\n");
      out.write("            .then(html => {\r\n");
      out.write("                document.getElementById('directory').innerHTML = html;\r\n");
      out.write("                \r\n");
      out.write("                requestAnimationFrame(() => {\r\n");
      out.write("                    \r\n");
      out.write("                    expandedDirs.forEach(function(dirPath) {\r\n");
      out.write("                        const dirToggle = document.getElementById(dirPath);\r\n");
      out.write("                        \r\n");
      out.write("                        if (dirToggle) {\r\n");
      out.write("                            const dirNode = dirToggle.closest('.dirNode');\r\n");
      out.write("                            if (dirNode) {\r\n");
      out.write("                                dirNode.classList.add('expanded');\r\n");
      out.write("                            }\r\n");
      out.write("                        }\r\n");
      out.write("                    });\r\n");
      out.write("                    \r\n");
      out.write("                    // Restore active directory with the same approach\r\n");
      out.write("                    if (activeDir) {\r\n");
      out.write("                        const activeDirToggle = document.getElementById(activeDir);\r\n");
      out.write("                        if (activeDirToggle) {\r\n");
      out.write("                            activeDirToggle.classList.add('active');\r\n");
      out.write("                            document.getElementById('activeDir').value = activeDir;\r\n");
      out.write("                        }\r\n");
      out.write("                    }\r\n");
      out.write("                });\r\n");
      out.write("            })\r\n");
      out.write("            .catch(error => console.error('Error updating directory tree:', error));\r\n");
      out.write("    }\r\n");
      out.write("</script>\r\n");
      out.write("    </head>\r\n");
      out.write("    <body>\r\n");
      out.write("        <input type=\"checkbox\" id=\"closeCheckbox\">\r\n");
      out.write("        <div id=\"navbar\">\r\n");
      out.write("            <div id=\"fileOptions\">\r\n");
      out.write("                <div class=\"fileOption\" id=\"newFile\"><i class=\"fa-solid fa-file\"></i></div>\r\n");
      out.write("                <div class=\"fileOption\" id=\"newDir\"><i class=\"fa-solid fa-folder-plus\"></i></div>\r\n");
      out.write("                <div class=\"fileOption\"><i class=\"fa-solid fa-arrow-up-wide-short\"></i></div>\r\n");
      out.write("                <div class=\"fileOption\" id=\"close\"><label for=\"closeCheckbox\"><i class=\"fa-solid\"></i></label></div>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div id=\"directory\">\r\n");
      out.write("\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("        <div id=\"content\">\r\n");
      out.write("            <div id=\"noteOptions\">\r\n");
      out.write("                <div class=\"noteOption\"><button type=\"submit\">Save Note</button></div>\r\n");
      out.write("                <div class=\"noteOption\"><button id=\"bold\"><i class=\"fa-solid fa-bold\"></i></button></div>\r\n");
      out.write("                <div class=\"noteOption\"><button id=\"italics\"><i class=\"fa-solid fa-italic\"></i></button></div>\r\n");
      out.write("                <div class=\"noteOption\">\r\n");
      out.write("                    <select id=\"fontSize\">\r\n");
      out.write("                        <option value=\"1\">1</option>\r\n");
      out.write("                        <option value=\"2\">2</option>\r\n");
      out.write("                        <option value=\"3\" selected>3</option>\r\n");
      out.write("                        <option value=\"4\">4</option>\r\n");
      out.write("                        <option value=\"5\">5</option>\r\n");
      out.write("                        <option value=\"6\">6</option>\r\n");
      out.write("                        <option value=\"7\">7</option>\r\n");
      out.write("                    </select>\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"noteOption\">\r\n");
      out.write("                    <input type=\"file\" id=\"imageUpload\" accept=\"image/*\" style=\"display: none;\">\r\n");
      out.write("                    <button type=\"button\" id=\"insertImage\"><i class=\"fa-solid fa-image\"></i></button>\r\n");
      out.write("                </div>\r\n");
      out.write("\r\n");
      out.write("            </div>\r\n");
      out.write("            <div id=\"backpage\">\r\n");
      out.write("                <form id=\"noteForm\" method=\"post\" action=\"saveNote\">\r\n");
      out.write("                    <input type=\"hidden\" name=\"notePath\" id=\"activeDir\">\r\n");
      out.write("                    <input type=\"hidden\" name=\"titleContent\" id=\"titleContent\">\r\n");
      out.write("                    <input type=\"hidden\" name=\"noteContent\" id=\"noteContent\">\r\n");
      out.write("                    <input type=\"hidden\" name=\"noteId\" id=\"noteId\">\r\n");
      out.write("                    <div contenteditable=\"true\" class=\"title\" data-placeholder=\"Title\"></div>\r\n");
      out.write("                    <div contenteditable=\"true\" class=\"content\" data-placeholder=\"Start writing...\"></div>\r\n");
      out.write("                </form>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <!-- Your custom context menu -->\r\n");
      out.write("        <div id=\"customContextMenu\">\r\n");
      out.write("            <div id=\"deleteOption\">Delete<i class=\"fa-solid fa-trash\"></i></div>\r\n");
      out.write("            <div id=\"renameOption\">\r\n");
      out.write("                Rename<i class=\"fa-solid fa-pen\"></i>\r\n");
      out.write("                <input type=\"text\" id=\"renameDirField\" style=\"display: none;\">\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("    </body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
